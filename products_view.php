<?php
// This script and data application were generated by AppGini 5.74
// Download AppGini for free from https://bigprof.com/appgini/download/

	$currDir=dirname(__FILE__);
	include("$currDir/defaultLang.php");
	include("$currDir/language.php");
	include("$currDir/lib.php");
	@include("$currDir/hooks/products.php");
	include("$currDir/products_dml.php");

	// mm: can the current member access this page?
	$perm=getTablePermissions('products');
	if(!$perm[0]){
		echo error_message($Translation['tableAccessDenied'], false);
		echo '<script>setTimeout("window.location=\'index.php?signOut=1\'", 2000);</script>';
		exit;
	}

	$x = new DataList;
	$x->TableName = "products";

	// Fields that can be displayed in the table view
	$x->QueryFieldsTV = array(   
		"`products`.`id`" => "id",
		"`products`.`codebar`" => "codebar",
		"if(CHAR_LENGTH(`products`.`productCode`)>100, concat(left(`products`.`productCode`,100),' ...'), `products`.`productCode`)" => "productCode",
		"if(CHAR_LENGTH(`products`.`productName`)>100, concat(left(`products`.`productName`,100),' ...'), `products`.`productName`)" => "productName",
		"IF(    CHAR_LENGTH(`kinds1`.`name`), CONCAT_WS('',   `kinds1`.`name`), '') /* Aliquota */" => "tax",
		"`products`.`increment`" => "increment",
		"IF(    CHAR_LENGTH(`kinds2`.`name`), CONCAT_WS('',   `kinds2`.`name`), '') /* Categoria */" => "CategoryID",
		"`products`.`UM`" => "UM",
		"`products`.`tare`" => "tare",
		"`products`.`QuantityPerUnit`" => "QuantityPerUnit",
		"CONCAT('&euro;', FORMAT(`products`.`UnitPrice`, 2))" => "UnitPrice",
		"CONCAT('&euro;', FORMAT(`products`.`sellPrice`, 2))" => "sellPrice",
		"`products`.`UnitsInStock`" => "UnitsInStock",
		"`products`.`UnitsOnOrder`" => "UnitsOnOrder",
		"`products`.`ReorderLevel`" => "ReorderLevel",
		"`products`.`balance`" => "balance",
		"concat('<i class=\"glyphicon glyphicon-', if(`products`.`Discontinued`, 'check', 'unchecked'), '\"></i>')" => "Discontinued",
		"if(`products`.`manufactured_date`,date_format(`products`.`manufactured_date`,'%Y-%m-%d'),'')" => "manufactured_date",
		"if(`products`.`expiry_date`,date_format(`products`.`expiry_date`,'%Y-%m-%d'),'')" => "expiry_date",
		"`products`.`note`" => "note",
		"if(`products`.`update_date`,date_format(`products`.`update_date`,'%Y-%m-%d %h:%i %p'),'')" => "update_date"
	);
	// mapping incoming sort by requests to actual query fields
	$x->SortFields = array(   
		1 => '`products`.`id`',
		2 => 2,
		3 => 3,
		4 => 4,
		5 => '`kinds1`.`name`',
		6 => '`products`.`increment`',
		7 => '`kinds2`.`name`',
		8 => 8,
		9 => '`products`.`tare`',
		10 => 10,
		11 => '`products`.`UnitPrice`',
		12 => '`products`.`sellPrice`',
		13 => '`products`.`UnitsInStock`',
		14 => '`products`.`UnitsOnOrder`',
		15 => '`products`.`ReorderLevel`',
		16 => '`products`.`balance`',
		17 => '`products`.`Discontinued`',
		18 => '`products`.`manufactured_date`',
		19 => '`products`.`expiry_date`',
		20 => 20,
		21 => '`products`.`update_date`'
	);

	// Fields that can be displayed in the csv file
	$x->QueryFieldsCSV = array(   
		"`products`.`id`" => "id",
		"`products`.`codebar`" => "codebar",
		"`products`.`productCode`" => "productCode",
		"`products`.`productName`" => "productName",
		"IF(    CHAR_LENGTH(`kinds1`.`name`), CONCAT_WS('',   `kinds1`.`name`), '') /* Aliquota */" => "tax",
		"`products`.`increment`" => "increment",
		"IF(    CHAR_LENGTH(`kinds2`.`name`), CONCAT_WS('',   `kinds2`.`name`), '') /* Categoria */" => "CategoryID",
		"`products`.`UM`" => "UM",
		"`products`.`tare`" => "tare",
		"`products`.`QuantityPerUnit`" => "QuantityPerUnit",
		"CONCAT('&euro;', FORMAT(`products`.`UnitPrice`, 2))" => "UnitPrice",
		"CONCAT('&euro;', FORMAT(`products`.`sellPrice`, 2))" => "sellPrice",
		"`products`.`UnitsInStock`" => "UnitsInStock",
		"`products`.`UnitsOnOrder`" => "UnitsOnOrder",
		"`products`.`ReorderLevel`" => "ReorderLevel",
		"`products`.`balance`" => "balance",
		"`products`.`Discontinued`" => "Discontinued",
		"if(`products`.`manufactured_date`,date_format(`products`.`manufactured_date`,'%Y-%m-%d'),'')" => "manufactured_date",
		"if(`products`.`expiry_date`,date_format(`products`.`expiry_date`,'%Y-%m-%d'),'')" => "expiry_date",
		"`products`.`note`" => "note",
		"if(`products`.`update_date`,date_format(`products`.`update_date`,'%Y-%m-%d %h:%i %p'),'')" => "update_date"
	);
	// Fields that can be filtered
	$x->QueryFieldsFilters = array(   
		"`products`.`id`" => "id",
		"`products`.`codebar`" => "Codebar",
		"`products`.`productCode`" => "Codice prodotto",
		"`products`.`productName`" => "Descrizione Prodotto",
		"IF(    CHAR_LENGTH(`kinds1`.`name`), CONCAT_WS('',   `kinds1`.`name`), '') /* Aliquota */" => "Aliquota",
		"`products`.`increment`" => "Ricarico %",
		"IF(    CHAR_LENGTH(`kinds2`.`name`), CONCAT_WS('',   `kinds2`.`name`), '') /* Categoria */" => "Categoria",
		"`products`.`UM`" => "UM",
		"`products`.`tare`" => "Tara",
		"`products`.`QuantityPerUnit`" => "Quantita per Unita",
		"`products`.`UnitPrice`" => "Prezzo Acquisto",
		"`products`.`sellPrice`" => "Prezzo Vendita",
		"`products`.`UnitsInStock`" => "Unita in stock",
		"`products`.`UnitsOnOrder`" => "Ordini in corso",
		"`products`.`ReorderLevel`" => "Livello di riordino",
		"`products`.`balance`" => "Giacenza",
		"`products`.`Discontinued`" => "Discontinuo",
		"`products`.`manufactured_date`" => "Manufactured date",
		"`products`.`expiry_date`" => "Expiry date",
		"`products`.`note`" => "Note",
		"`products`.`update_date`" => "Update date"
	);

	// Fields that can be quick searched
	$x->QueryFieldsQS = array(   
		"`products`.`id`" => "id",
		"`products`.`codebar`" => "codebar",
		"`products`.`productCode`" => "Codice prodotto",
		"`products`.`productName`" => "Descrizione Prodotto",
		"IF(    CHAR_LENGTH(`kinds1`.`name`), CONCAT_WS('',   `kinds1`.`name`), '') /* Aliquota */" => "tax",
		"`products`.`increment`" => "increment",
		"IF(    CHAR_LENGTH(`kinds2`.`name`), CONCAT_WS('',   `kinds2`.`name`), '') /* Categoria */" => "CategoryID",
		"`products`.`UM`" => "UM",
		"`products`.`tare`" => "tare",
		"`products`.`QuantityPerUnit`" => "QuantityPerUnit",
		"CONCAT('&euro;', FORMAT(`products`.`UnitPrice`, 2))" => "UnitPrice",
		"CONCAT('&euro;', FORMAT(`products`.`sellPrice`, 2))" => "sellPrice",
		"`products`.`UnitsInStock`" => "UnitsInStock",
		"`products`.`UnitsOnOrder`" => "UnitsOnOrder",
		"`products`.`ReorderLevel`" => "ReorderLevel",
		"`products`.`balance`" => "balance",
		"concat('<i class=\"glyphicon glyphicon-', if(`products`.`Discontinued`, 'check', 'unchecked'), '\"></i>')" => "Discontinued",
		"if(`products`.`manufactured_date`,date_format(`products`.`manufactured_date`,'%Y-%m-%d'),'')" => "manufactured_date",
		"if(`products`.`expiry_date`,date_format(`products`.`expiry_date`,'%Y-%m-%d'),'')" => "expiry_date",
		"`products`.`note`" => "note",
		"if(`products`.`update_date`,date_format(`products`.`update_date`,'%Y-%m-%d %h:%i %p'),'')" => "update_date"
	);

	// Lookup fields that can be used as filterers
	$x->filterers = array(  'tax' => 'Aliquota', 'CategoryID' => 'Categoria');

	$x->QueryFrom = "`products` LEFT JOIN `kinds` as kinds1 ON `kinds1`.`code`=`products`.`tax` LEFT JOIN `kinds` as kinds2 ON `kinds2`.`code`=`products`.`CategoryID` ";
	$x->QueryWhere = '';
	$x->QueryOrder = '';

	$x->AllowSelection = 1;
	$x->HideTableView = ($perm[2]==0 ? 1 : 0);
	$x->AllowDelete = $perm[4];
	$x->AllowMassDelete = true;
	$x->AllowInsert = $perm[1];
	$x->AllowUpdate = $perm[3];
	$x->SeparateDV = 1;
	$x->AllowDeleteOfParents = 0;
	$x->AllowFilters = 1;
	$x->AllowSavingFilters = 1;
	$x->AllowSorting = 1;
	$x->AllowNavigation = 1;
	$x->AllowPrinting = 1;
	$x->AllowCSV = 1;
	$x->RecordsPerPage = 100;
	$x->QuickSearch = 1;
	$x->QuickSearchText = $Translation["quick search"];
	$x->ScriptFileName = "products_view.php";
	$x->RedirectAfterInsert = "products_view.php";
	$x->TableTitle = "Articoli Magazzino";
	$x->TableIcon = "resources/table_icons/installer_box.png";
	$x->PrimaryKey = "`products`.`id`";
	$x->DefaultSortField = '4';
	$x->DefaultSortDirection = 'asc';

	$x->ColWidth   = array(  150, 150, 250, 150, 150, 120, 150, 150, 70, 150, 150, 100, 150, 150, 150, 150);
	$x->ColCaption = array("Codebar", "Codice prodotto", "Descrizione Prodotto", "Aliquota", "Ricarico %", "Categoria", "UM", "Tara", "Prezzo Acquisto", "Prezzo Vendita", "Giacenza", "Discontinuo", "Manufactured date", "Expiry date", "Note", "Update date");
	$x->ColFieldName = array('codebar', 'productCode', 'productName', 'tax', 'increment', 'CategoryID', 'UM', 'tare', 'UnitPrice', 'sellPrice', 'balance', 'Discontinued', 'manufactured_date', 'expiry_date', 'note', 'update_date');
	$x->ColNumber  = array(2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 16, 17, 18, 19, 20, 21);

	// template paths below are based on the app main directory
	$x->Template = 'templates/products_templateTV.html';
	$x->SelectedTemplate = 'templates/products_templateTVS.html';
	$x->TemplateDV = 'templates/products_templateDV.html';
	$x->TemplateDVP = 'templates/products_templateDVP.html';

	$x->ShowTableHeader = 1;
	$x->TVClasses = "";
	$x->DVClasses = "";
	$x->HighlightColor = '#FFF0C2';

	// mm: build the query based on current member's permissions
	$DisplayRecords = $_REQUEST['DisplayRecords'];
	if(!in_array($DisplayRecords, array('user', 'group'))){ $DisplayRecords = 'all'; }
	if($perm[2]==1 || ($perm[2]>1 && $DisplayRecords=='user' && !$_REQUEST['NoFilter_x'])){ // view owner only
		$x->QueryFrom.=', membership_userrecords';
		$x->QueryWhere="where `products`.`id`=membership_userrecords.pkValue and membership_userrecords.tableName='products' and lcase(membership_userrecords.memberID)='".getLoggedMemberID()."'";
	}elseif($perm[2]==2 || ($perm[2]>2 && $DisplayRecords=='group' && !$_REQUEST['NoFilter_x'])){ // view group only
		$x->QueryFrom.=', membership_userrecords';
		$x->QueryWhere="where `products`.`id`=membership_userrecords.pkValue and membership_userrecords.tableName='products' and membership_userrecords.groupID='".getLoggedGroupID()."'";
	}elseif($perm[2]==3){ // view all
		// no further action
	}elseif($perm[2]==0){ // view none
		$x->QueryFields = array("Not enough permissions" => "NEP");
		$x->QueryFrom = '`products`';
		$x->QueryWhere = '';
		$x->DefaultSortField = '';
	}
	// hook: products_init
	$render=TRUE;
	if(function_exists('products_init')){
		$args=array();
		$render=products_init($x, getMemberInfo(), $args);
	}

	if($render) $x->Render();

	// column sums
	if(strpos($x->HTML, '<!-- tv data below -->')){
		// if printing multi-selection TV, calculate the sum only for the selected records
		if(isset($_REQUEST['Print_x']) && is_array($_REQUEST['record_selector'])){
			$QueryWhere = '';
			foreach($_REQUEST['record_selector'] as $id){   // get selected records
				if($id != '') $QueryWhere .= "'" . makeSafe($id) . "',";
			}
			if($QueryWhere != ''){
				$QueryWhere = 'where `products`.`id` in ('.substr($QueryWhere, 0, -1).')';
			}else{ // if no selected records, write the where clause to return an empty result
				$QueryWhere = 'where 1=0';
			}
		}else{
			$QueryWhere = $x->QueryWhere;
		}

		$sumQuery = "select sum(`products`.`tare`), sum(`products`.`balance`) from {$x->QueryFrom} {$QueryWhere}";
		$res = sql($sumQuery, $eo);
		if($row = db_fetch_row($res)){
			$sumRow = '<tr class="success">';
			if(!isset($_REQUEST['Print_x'])) $sumRow .= '<td class="text-center"><strong>&sum;</strong></td>';
			$sumRow .= '<td class="products-codebar"></td>';
			$sumRow .= '<td class="products-productCode"></td>';
			$sumRow .= '<td class="products-productName"></td>';
			$sumRow .= '<td class="products-tax"></td>';
			$sumRow .= '<td class="products-increment"></td>';
			$sumRow .= '<td class="products-CategoryID"></td>';
			$sumRow .= '<td class="products-UM"></td>';
			$sumRow .= "<td class=\"products-tare text-right\">{$row[0]}</td>";
			$sumRow .= '<td class="products-UnitPrice"></td>';
			$sumRow .= '<td class="products-sellPrice"></td>';
			$sumRow .= "<td class=\"products-balance text-right\">{$row[1]}</td>";
			$sumRow .= '<td class="products-Discontinued"></td>';
			$sumRow .= '<td class="products-manufactured_date"></td>';
			$sumRow .= '<td class="products-expiry_date"></td>';
			$sumRow .= '<td class="products-note"></td>';
			$sumRow .= '<td class="products-update_date"></td>';
			$sumRow .= '</tr>';

			$x->HTML = str_replace('<!-- tv data below -->', '', $x->HTML);
			$x->HTML = str_replace('<!-- tv data above -->', $sumRow, $x->HTML);
		}
	}

	// hook: products_header
	$headerCode='';
	if(function_exists('products_header')){
		$args=array();
		$headerCode=products_header($x->ContentType, getMemberInfo(), $args);
	}  
	if(!$headerCode){
		include_once("$currDir/header.php"); 
	}else{
		ob_start(); include_once("$currDir/header.php"); $dHeader=ob_get_contents(); ob_end_clean();
		echo str_replace('<%%HEADER%%>', $dHeader, $headerCode);
	}

	echo $x->HTML;
	// hook: products_footer
	$footerCode='';
	if(function_exists('products_footer')){
		$args=array();
		$footerCode=products_footer($x->ContentType, getMemberInfo(), $args);
	}  
	if(!$footerCode){
		include_once("$currDir/footer.php"); 
	}else{
		ob_start(); include_once("$currDir/footer.php"); $dFooter=ob_get_contents(); ob_end_clean();
		echo str_replace('<%%FOOTER%%>', $dFooter, $footerCode);
	}
?>